{
  "new component": {
    "scope": "typescriptreact",
    "prefix": "comp",
    "description": "Add new component",
    "body": [
      "interface $1Props {",
      "  $0",
      "}",
      "",
      "export default function $1({}: $1Props): JSX.Element {",
      "  return (<></>);",
      "}",
      ""
    ]
  },

  "new component stories": {
    "scope": "typescriptreact",
    "prefix": "story",
    "description": "Add ladle story for component",
    "body": [
      "import type { StoryDefault } from \"@ladle/react\";",
      "import $1 from \".\";",
      "",
      "export function Default() {",
      "  return <$1 />;",
      "}",
      "",
      "export default {",
      "  title: \"Category / $1\",",
      "} satisfies StoryDefault;"
    ]
  },

  "new component stories with controls": {
    "scope": "typescriptreact",
    "prefix": "storycontrols",
    "description": "Add ladle story with controls for component",
    "body": [
      "import type { Story, StoryDefault } from \"@ladle/react\";",
      "import $1 from \".\";",
      "",
      "interface StoryProps {",
      "  text: string;",
      "}",
      "",
      "function StoryComponent({ text }: StoryProps) {",
      "  return <$1 $0/>;",
      "}",
      "",
      "export const Default: Story<StoryProps> = StoryComponent;",
      "",
      "Default.args = {",
      "  text: \"Hello World\",",
      "};",
      "",
      "Default.argTypes = {",
      "  text: {",
      "    control: { type: \"text\" },",
      "  },",
      "};",
      "",
      "export default {",
      "  title: \"Category / $1\",",
      "} satisfies StoryDefault;"
    ]
  },

  "new component index": {
    "scope": "typescriptreact,typescript",
    "prefix": "indexcomp",
    "description": "Add new component index",
    "body": ["export { default } from \"./$1\";", "export * from \"./$1\";", ""]
  },

  "new component test": {
    "scope": "typescriptreact",
    "prefix": "test",
    "description": "Add new component test",
    "body": [
      "import { render } from \"../../../.jest/render\";",
      "import $1 from \".\";",
      "",
      "describe(\"$1\", () => {",
      "  it(\"renders\", () => {",
      "    const { asFragment } = ",
      "      render(<$1$0 />);",
      "",
      "    expect(asFragment()).toMatchSnapshot();",
      "  });",
      "});",
      ""
    ]
  }
}
